/*******************************************************************************
 * Copyright Â© 2017, 2018 Hulles Industries LLC
 * All rights reserved
 *  
 * This file is part of Alixia.
 *  
 * Alixia is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *    
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifer: GPL-3.0-or-later
 *******************************************************************************/
package com.hulles.alixia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.alixia.cayenne.Nfl6Question;

/**
 * Class _Nfl6Category was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Nfl6Category extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NFL6_CATEGORY_ID_PK_COLUMN = "nfl6_category_ID";

    public static final Property<String> CATEGORY_NAME = Property.create("categoryName", String.class);
    public static final Property<List<Nfl6Question>> NFL6QUESTIONS = Property.create("nfl6Questions", List.class);

    protected String categoryName;

    protected Object nfl6Questions;

    public void setCategoryName(String categoryName) {
        beforePropertyWrite("categoryName", this.categoryName, categoryName);
        this.categoryName = categoryName;
    }

    public String getCategoryName() {
        beforePropertyRead("categoryName");
        return this.categoryName;
    }

    public void addToNfl6Questions(Nfl6Question obj) {
        addToManyTarget("nfl6Questions", obj, true);
    }

    public void removeFromNfl6Questions(Nfl6Question obj) {
        removeToManyTarget("nfl6Questions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Nfl6Question> getNfl6Questions() {
        return (List<Nfl6Question>)readProperty("nfl6Questions");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "categoryName":
                return this.categoryName;
            case "nfl6Questions":
                return this.nfl6Questions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "categoryName":
                this.categoryName = (String)val;
                break;
            case "nfl6Questions":
                this.nfl6Questions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.categoryName);
        out.writeObject(this.nfl6Questions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.categoryName = (String)in.readObject();
        this.nfl6Questions = in.readObject();
    }

}
