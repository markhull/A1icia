package com.hulles.alixia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.alixia.cayenne.AnswerHistory;

/**
 * Class _AnswerChunk was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AnswerChunk extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANSWER_CHUNK_ID_PK_COLUMN = "answer_chunk_ID";

    public static final Property<String> CHUNK = Property.create("chunk", String.class);
    public static final Property<String> CHUNK_TAGS = Property.create("chunkTags", String.class);
    public static final Property<Short> SEQUENCE = Property.create("sequence", Short.class);
    public static final Property<AnswerHistory> ANSWER_HISTORY = Property.create("answerHistory", AnswerHistory.class);

    protected String chunk;
    protected String chunkTags;
    protected Short sequence;

    protected Object answerHistory;

    public void setChunk(String chunk) {
        beforePropertyWrite("chunk", this.chunk, chunk);
        this.chunk = chunk;
    }

    public String getChunk() {
        beforePropertyRead("chunk");
        return this.chunk;
    }

    public void setChunkTags(String chunkTags) {
        beforePropertyWrite("chunkTags", this.chunkTags, chunkTags);
        this.chunkTags = chunkTags;
    }

    public String getChunkTags() {
        beforePropertyRead("chunkTags");
        return this.chunkTags;
    }

    public void setSequence(Short sequence) {
        beforePropertyWrite("sequence", this.sequence, sequence);
        this.sequence = sequence;
    }

    public Short getSequence() {
        beforePropertyRead("sequence");
        return this.sequence;
    }

    public void setAnswerHistory(AnswerHistory answerHistory) {
        setToOneTarget("answerHistory", answerHistory, true);
    }

    public AnswerHistory getAnswerHistory() {
        return (AnswerHistory)readProperty("answerHistory");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "chunk":
                return this.chunk;
            case "chunkTags":
                return this.chunkTags;
            case "sequence":
                return this.sequence;
            case "answerHistory":
                return this.answerHistory;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "chunk":
                this.chunk = (String)val;
                break;
            case "chunkTags":
                this.chunkTags = (String)val;
                break;
            case "sequence":
                this.sequence = (Short)val;
                break;
            case "answerHistory":
                this.answerHistory = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.chunk);
        out.writeObject(this.chunkTags);
        out.writeObject(this.sequence);
        out.writeObject(this.answerHistory);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.chunk = (String)in.readObject();
        this.chunkTags = (String)in.readObject();
        this.sequence = (Short)in.readObject();
        this.answerHistory = in.readObject();
    }

}
