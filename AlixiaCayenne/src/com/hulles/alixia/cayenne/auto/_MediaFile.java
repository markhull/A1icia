/*******************************************************************************
 * Copyright Â© 2017, 2018 Hulles Industries LLC
 * All rights reserved
 *  
 * This file is part of Alixia.
 *  
 * Alixia is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *    
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifer: GPL-3.0-or-later
 *******************************************************************************/
package com.hulles.alixia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _MediaFile was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MediaFile extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String MEDIA_FILE_ID_PK_COLUMN = "media_file_ID";

    public static final Property<String> ARTIST = Property.create("artist", String.class);
    public static final Property<String> FILE_NAME = Property.create("fileName", String.class);
    public static final Property<String> FORMAT_CODE = Property.create("formatCode", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);

    protected String artist;
    protected String fileName;
    protected String formatCode;
    protected String title;


    public void setArtist(String artist) {
        beforePropertyWrite("artist", this.artist, artist);
        this.artist = artist;
    }

    public String getArtist() {
        beforePropertyRead("artist");
        return this.artist;
    }

    public void setFileName(String fileName) {
        beforePropertyWrite("fileName", this.fileName, fileName);
        this.fileName = fileName;
    }

    public String getFileName() {
        beforePropertyRead("fileName");
        return this.fileName;
    }

    public void setFormatCode(String formatCode) {
        beforePropertyWrite("formatCode", this.formatCode, formatCode);
        this.formatCode = formatCode;
    }

    public String getFormatCode() {
        beforePropertyRead("formatCode");
        return this.formatCode;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "artist":
                return this.artist;
            case "fileName":
                return this.fileName;
            case "formatCode":
                return this.formatCode;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "artist":
                this.artist = (String)val;
                break;
            case "fileName":
                this.fileName = (String)val;
                break;
            case "formatCode":
                this.formatCode = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.artist);
        out.writeObject(this.fileName);
        out.writeObject(this.formatCode);
        out.writeObject(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.artist = (String)in.readObject();
        this.fileName = (String)in.readObject();
        this.formatCode = (String)in.readObject();
        this.title = (String)in.readObject();
    }

}
