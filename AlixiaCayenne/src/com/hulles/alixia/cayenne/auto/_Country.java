/*******************************************************************************
 * Copyright Â© 2017, 2018 Hulles Industries LLC
 * All rights reserved
 *  
 * This file is part of Alixia.
 *  
 * Alixia is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *    
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifer: GPL-3.0-or-later
 *******************************************************************************/
package com.hulles.alixia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.alixia.cayenne.OwmCity;

/**
 * Class _Country was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Country extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String COUNTRY_ID_PK_COLUMN = "country_ID";

    public static final Property<String> CODE2 = Property.create("code2", String.class);
    public static final Property<String> COUNTRY_UUID = Property.create("countryUuid", String.class);
    public static final Property<String> ISO3 = Property.create("iso3", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<OwmCity>> OWM_CITIES = Property.create("owmCities", List.class);

    protected String code2;
    protected String countryUuid;
    protected String iso3;
    protected String name;

    protected Object owmCities;

    public void setCode2(String code2) {
        beforePropertyWrite("code2", this.code2, code2);
        this.code2 = code2;
    }

    public String getCode2() {
        beforePropertyRead("code2");
        return this.code2;
    }

    public void setCountryUuid(String countryUuid) {
        beforePropertyWrite("countryUuid", this.countryUuid, countryUuid);
        this.countryUuid = countryUuid;
    }

    public String getCountryUuid() {
        beforePropertyRead("countryUuid");
        return this.countryUuid;
    }

    public void setIso3(String iso3) {
        beforePropertyWrite("iso3", this.iso3, iso3);
        this.iso3 = iso3;
    }

    public String getIso3() {
        beforePropertyRead("iso3");
        return this.iso3;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToOwmCities(OwmCity obj) {
        addToManyTarget("owmCities", obj, true);
    }

    public void removeFromOwmCities(OwmCity obj) {
        removeToManyTarget("owmCities", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<OwmCity> getOwmCities() {
        return (List<OwmCity>)readProperty("owmCities");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "code2":
                return this.code2;
            case "countryUuid":
                return this.countryUuid;
            case "iso3":
                return this.iso3;
            case "name":
                return this.name;
            case "owmCities":
                return this.owmCities;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "code2":
                this.code2 = (String)val;
                break;
            case "countryUuid":
                this.countryUuid = (String)val;
                break;
            case "iso3":
                this.iso3 = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "owmCities":
                this.owmCities = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.code2);
        out.writeObject(this.countryUuid);
        out.writeObject(this.iso3);
        out.writeObject(this.name);
        out.writeObject(this.owmCities);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.code2 = (String)in.readObject();
        this.countryUuid = (String)in.readObject();
        this.iso3 = (String)in.readObject();
        this.name = (String)in.readObject();
        this.owmCities = in.readObject();
    }

}
