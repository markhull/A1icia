package com.hulles.alixia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.alixia.cayenne.Country;

/**
 * Class _OwmCity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _OwmCity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String OWM_CITY_ID_PK_COLUMN = "owm_city_ID";

    public static final Property<Float> LATITUDE = Property.create("latitude", Float.class);
    public static final Property<Float> LONGITUDE = Property.create("longitude", Float.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> OWM_ID = Property.create("owmId", Integer.class);
    public static final Property<Country> COUNTRY = Property.create("country", Country.class);

    protected Float latitude;
    protected Float longitude;
    protected String name;
    protected Integer owmId;

    protected Object country;

    public void setLatitude(Float latitude) {
        beforePropertyWrite("latitude", this.latitude, latitude);
        this.latitude = latitude;
    }

    public Float getLatitude() {
        beforePropertyRead("latitude");
        return this.latitude;
    }

    public void setLongitude(Float longitude) {
        beforePropertyWrite("longitude", this.longitude, longitude);
        this.longitude = longitude;
    }

    public Float getLongitude() {
        beforePropertyRead("longitude");
        return this.longitude;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setOwmId(Integer owmId) {
        beforePropertyWrite("owmId", this.owmId, owmId);
        this.owmId = owmId;
    }

    public Integer getOwmId() {
        beforePropertyRead("owmId");
        return this.owmId;
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "latitude":
                return this.latitude;
            case "longitude":
                return this.longitude;
            case "name":
                return this.name;
            case "owmId":
                return this.owmId;
            case "country":
                return this.country;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "latitude":
                this.latitude = (Float)val;
                break;
            case "longitude":
                this.longitude = (Float)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "owmId":
                this.owmId = (Integer)val;
                break;
            case "country":
                this.country = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.latitude);
        out.writeObject(this.longitude);
        out.writeObject(this.name);
        out.writeObject(this.owmId);
        out.writeObject(this.country);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.latitude = (Float)in.readObject();
        this.longitude = (Float)in.readObject();
        this.name = (String)in.readObject();
        this.owmId = (Integer)in.readObject();
        this.country = in.readObject();
    }

}
