package com.hulles.a1icia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.a1icia.cayenne.Nfl6Question;

/**
 * Class _NbestAnswer was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NbestAnswer extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NBEST_ANSWER_ID_PK_COLUMN = "nbest_answer_ID";

    public static final Property<String> ANSWER = Property.create("answer", String.class);
    public static final Property<Nfl6Question> NFL6QUESTION = Property.create("nfl6Question", Nfl6Question.class);

    protected String answer;

    protected Object nfl6Question;

    public void setAnswer(String answer) {
        beforePropertyWrite("answer", this.answer, answer);
        this.answer = answer;
    }

    public String getAnswer() {
        beforePropertyRead("answer");
        return this.answer;
    }

    public void setNfl6Question(Nfl6Question nfl6Question) {
        setToOneTarget("nfl6Question", nfl6Question, true);
    }

    public Nfl6Question getNfl6Question() {
        return (Nfl6Question)readProperty("nfl6Question");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "answer":
                return this.answer;
            case "nfl6Question":
                return this.nfl6Question;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "answer":
                this.answer = (String)val;
                break;
            case "nfl6Question":
                this.nfl6Question = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.answer);
        out.writeObject(this.nfl6Question);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.answer = (String)in.readObject();
        this.nfl6Question = in.readObject();
    }

}
