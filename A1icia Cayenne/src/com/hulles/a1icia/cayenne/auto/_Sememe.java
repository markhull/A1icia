/*******************************************************************************
 * Copyright Â© 2017, 2018 Hulles Industries LLC
 * All rights reserved
 *  
 * This file is part of A1icia.
 *  
 * A1icia is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *    
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifer: GPL-3.0-or-later
 *******************************************************************************/
package com.hulles.a1icia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.a1icia.cayenne.AnswerHistory;

/**
 * Class _Sememe was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Sememe extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String SPARK_ID_PK_COLUMN = "sememe_ID";

    public static final Property<Boolean> ADMIN_ONLY = Property.create("adminOnly", Boolean.class);
    public static final Property<String> CANONICAL_FORM = Property.create("canonicalForm", String.class);
    public static final Property<Boolean> EXTERNAL = Property.create("external", Boolean.class);
    public static final Property<Boolean> LOGGED_IN = Property.create("loggedIn", Boolean.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<AnswerHistory>> ANSWER_HISTORIES = Property.create("answerHistories", List.class);

    protected boolean adminOnly;
    protected String canonicalForm;
    protected boolean external;
    protected boolean loggedIn;
    protected String name;

    protected Object answerHistories;

    public void setAdminOnly(Boolean adminOnly) {
        beforePropertyWrite("adminOnly", this.adminOnly, adminOnly);
        this.adminOnly = adminOnly;
    }

    public Boolean getAdminOnly() {
        beforePropertyRead("adminOnly");
        return this.adminOnly;
    }

    public void setCanonicalForm(String canonicalForm) {
        beforePropertyWrite("canonicalForm", this.canonicalForm, canonicalForm);
        this.canonicalForm = canonicalForm;
    }

    public String getCanonicalForm() {
        beforePropertyRead("canonicalForm");
        return this.canonicalForm;
    }

    public void setExternal(Boolean external) {
        beforePropertyWrite("external", this.external, external);
        this.external = external;
    }

    public Boolean getExternal() {
        beforePropertyRead("external");
        return this.external;
    }

    public void setLoggedIn(Boolean loggedIn) {
        beforePropertyWrite("loggedIn", this.loggedIn, loggedIn);
        this.loggedIn = loggedIn;
    }

    public Boolean getLoggedIn() {
        beforePropertyRead("loggedIn");
        return this.loggedIn;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToAnswerHistories(AnswerHistory obj) {
        addToManyTarget("answerHistories", obj, true);
    }

    public void removeFromAnswerHistories(AnswerHistory obj) {
        removeToManyTarget("answerHistories", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AnswerHistory> getAnswerHistories() {
        return (List<AnswerHistory>)readProperty("answerHistories");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "adminOnly":
                return this.adminOnly;
            case "canonicalForm":
                return this.canonicalForm;
            case "external":
                return this.external;
            case "loggedIn":
                return this.loggedIn;
            case "name":
                return this.name;
            case "answerHistories":
                return this.answerHistories;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "adminOnly":
                this.adminOnly = val == null ? false : (boolean)val;
                break;
            case "canonicalForm":
                this.canonicalForm = (String)val;
                break;
            case "external":
                this.external = val == null ? false : (boolean)val;
                break;
            case "loggedIn":
                this.loggedIn = val == null ? false : (boolean)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "answerHistories":
                this.answerHistories = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeBoolean(this.adminOnly);
        out.writeObject(this.canonicalForm);
        out.writeBoolean(this.external);
        out.writeBoolean(this.loggedIn);
        out.writeObject(this.name);
        out.writeObject(this.answerHistories);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.adminOnly = in.readBoolean();
        this.canonicalForm = (String)in.readObject();
        this.external = in.readBoolean();
        this.loggedIn = in.readBoolean();
        this.name = (String)in.readObject();
        this.answerHistories = in.readObject();
    }

}
