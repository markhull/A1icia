package com.hulles.a1icia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.hulles.a1icia.cayenne.Task;

/**
 * Class _Person was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Person extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PERSON_ID_PK_COLUMN = "person_ID";

    public static final Property<byte[]> AVATAR_BYTES = Property.create("avatarBytes", byte[].class);
    public static final Property<LocalDate> BIRTH_DATE = Property.create("birthDate", LocalDate.class);
    public static final Property<Boolean> CHECK_IN = Property.create("checkIn", Boolean.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<Character> GENDER_CODE = Property.create("genderCode", Character.class);
    public static final Property<Integer> HEIGHT_CM = Property.create("heightCm", Integer.class);
    public static final Property<LocalDateTime> LAST_ACCESS = Property.create("lastAccess", LocalDateTime.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> MOBILE = Property.create("mobile", String.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<LocalDateTime> PASSWORD_CHANGED = Property.create("passwordChanged", LocalDateTime.class);
    public static final Property<String> PERSON_UUID = Property.create("personUuid", String.class);
    public static final Property<Integer> USER_TYPE_ID = Property.create("userTypeId", Integer.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<List<Task>> TASKS = Property.create("tasks", List.class);

    protected byte[] avatarBytes;
    protected LocalDate birthDate;
    protected boolean checkIn;
    protected String email;
    protected String firstName;
    protected Character genderCode;
    protected Integer heightCm;
    protected LocalDateTime lastAccess;
    protected String lastName;
    protected String mobile;
    protected String notes;
    protected String password;
    protected LocalDateTime passwordChanged;
    protected String personUuid;
    protected int userTypeId;
    protected String username;

    protected Object tasks;

    public void setAvatarBytes(byte[] avatarBytes) {
        beforePropertyWrite("avatarBytes", this.avatarBytes, avatarBytes);
        this.avatarBytes = avatarBytes;
    }

    public byte[] getAvatarBytes() {
        beforePropertyRead("avatarBytes");
        return this.avatarBytes;
    }

    public void setBirthDate(LocalDate birthDate) {
        beforePropertyWrite("birthDate", this.birthDate, birthDate);
        this.birthDate = birthDate;
    }

    public LocalDate getBirthDate() {
        beforePropertyRead("birthDate");
        return this.birthDate;
    }

    public void setCheckIn(Boolean checkIn) {
        beforePropertyWrite("checkIn", this.checkIn, checkIn);
        this.checkIn = checkIn;
    }

    public Boolean getCheckIn() {
        beforePropertyRead("checkIn");
        return this.checkIn;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setGenderCode(Character genderCode) {
        beforePropertyWrite("genderCode", this.genderCode, genderCode);
        this.genderCode = genderCode;
    }

    public Character getGenderCode() {
        beforePropertyRead("genderCode");
        return this.genderCode;
    }

    public void setHeightCm(Integer heightCm) {
        beforePropertyWrite("heightCm", this.heightCm, heightCm);
        this.heightCm = heightCm;
    }

    public Integer getHeightCm() {
        beforePropertyRead("heightCm");
        return this.heightCm;
    }

    public void setLastAccess(LocalDateTime lastAccess) {
        beforePropertyWrite("lastAccess", this.lastAccess, lastAccess);
        this.lastAccess = lastAccess;
    }

    public LocalDateTime getLastAccess() {
        beforePropertyRead("lastAccess");
        return this.lastAccess;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setMobile(String mobile) {
        beforePropertyWrite("mobile", this.mobile, mobile);
        this.mobile = mobile;
    }

    public String getMobile() {
        beforePropertyRead("mobile");
        return this.mobile;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPasswordChanged(LocalDateTime passwordChanged) {
        beforePropertyWrite("passwordChanged", this.passwordChanged, passwordChanged);
        this.passwordChanged = passwordChanged;
    }

    public LocalDateTime getPasswordChanged() {
        beforePropertyRead("passwordChanged");
        return this.passwordChanged;
    }

    public void setPersonUuid(String personUuid) {
        beforePropertyWrite("personUuid", this.personUuid, personUuid);
        this.personUuid = personUuid;
    }

    public String getPersonUuid() {
        beforePropertyRead("personUuid");
        return this.personUuid;
    }

    public void setUserTypeId(Integer userTypeId) {
        beforePropertyWrite("userTypeId", this.userTypeId, userTypeId);
        this.userTypeId = userTypeId;
    }

    public Integer getUserTypeId() {
        beforePropertyRead("userTypeId");
        return this.userTypeId;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void addToTasks(Task obj) {
        addToManyTarget("tasks", obj, true);
    }

    public void removeFromTasks(Task obj) {
        removeToManyTarget("tasks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Task> getTasks() {
        return (List<Task>)readProperty("tasks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "avatarBytes":
                return this.avatarBytes;
            case "birthDate":
                return this.birthDate;
            case "checkIn":
                return this.checkIn;
            case "email":
                return this.email;
            case "firstName":
                return this.firstName;
            case "genderCode":
                return this.genderCode;
            case "heightCm":
                return this.heightCm;
            case "lastAccess":
                return this.lastAccess;
            case "lastName":
                return this.lastName;
            case "mobile":
                return this.mobile;
            case "notes":
                return this.notes;
            case "password":
                return this.password;
            case "passwordChanged":
                return this.passwordChanged;
            case "personUuid":
                return this.personUuid;
            case "userTypeId":
                return this.userTypeId;
            case "username":
                return this.username;
            case "tasks":
                return this.tasks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "avatarBytes":
                this.avatarBytes = (byte[])val;
                break;
            case "birthDate":
                this.birthDate = (LocalDate)val;
                break;
            case "checkIn":
                this.checkIn = val == null ? false : (boolean)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "genderCode":
                this.genderCode = (Character)val;
                break;
            case "heightCm":
                this.heightCm = (Integer)val;
                break;
            case "lastAccess":
                this.lastAccess = (LocalDateTime)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "mobile":
                this.mobile = (String)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "passwordChanged":
                this.passwordChanged = (LocalDateTime)val;
                break;
            case "personUuid":
                this.personUuid = (String)val;
                break;
            case "userTypeId":
                this.userTypeId = val == null ? 0 : (int)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "tasks":
                this.tasks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.avatarBytes);
        out.writeObject(this.birthDate);
        out.writeBoolean(this.checkIn);
        out.writeObject(this.email);
        out.writeObject(this.firstName);
        out.writeObject(this.genderCode);
        out.writeObject(this.heightCm);
        out.writeObject(this.lastAccess);
        out.writeObject(this.lastName);
        out.writeObject(this.mobile);
        out.writeObject(this.notes);
        out.writeObject(this.password);
        out.writeObject(this.passwordChanged);
        out.writeObject(this.personUuid);
        out.writeInt(this.userTypeId);
        out.writeObject(this.username);
        out.writeObject(this.tasks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.avatarBytes = (byte[])in.readObject();
        this.birthDate = (LocalDate)in.readObject();
        this.checkIn = in.readBoolean();
        this.email = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.genderCode = (Character)in.readObject();
        this.heightCm = (Integer)in.readObject();
        this.lastAccess = (LocalDateTime)in.readObject();
        this.lastName = (String)in.readObject();
        this.mobile = (String)in.readObject();
        this.notes = (String)in.readObject();
        this.password = (String)in.readObject();
        this.passwordChanged = (LocalDateTime)in.readObject();
        this.personUuid = (String)in.readObject();
        this.userTypeId = in.readInt();
        this.username = (String)in.readObject();
        this.tasks = in.readObject();
    }

}
