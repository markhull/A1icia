/*******************************************************************************
 * Copyright Â© 2017 Hulles Industries LLC
 * All rights reserved
 *  
 * This file is part of A1icia.
 *  
 * A1icia is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *    
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package com.hulles.a1icia.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Lemma was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Lemma extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String LEMMA_ID_PK_COLUMN = "lemma_ID";

    public static final Property<String> LEMMA = Property.create("lemma", String.class);
    public static final Property<String> POS = Property.create("pos", String.class);
    public static final Property<String> WORD = Property.create("word", String.class);

    protected String lemma;
    protected String pos;
    protected String word;


    public void setLemma(String lemma) {
        beforePropertyWrite("lemma", this.lemma, lemma);
        this.lemma = lemma;
    }

    public String getLemma() {
        beforePropertyRead("lemma");
        return this.lemma;
    }

    public void setPos(String pos) {
        beforePropertyWrite("pos", this.pos, pos);
        this.pos = pos;
    }

    public String getPos() {
        beforePropertyRead("pos");
        return this.pos;
    }

    public void setWord(String word) {
        beforePropertyWrite("word", this.word, word);
        this.word = word;
    }

    public String getWord() {
        beforePropertyRead("word");
        return this.word;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lemma":
                return this.lemma;
            case "pos":
                return this.pos;
            case "word":
                return this.word;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lemma":
                this.lemma = (String)val;
                break;
            case "pos":
                this.pos = (String)val;
                break;
            case "word":
                this.word = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lemma);
        out.writeObject(this.pos);
        out.writeObject(this.word);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lemma = (String)in.readObject();
        this.pos = (String)in.readObject();
        this.word = (String)in.readObject();
    }

}
