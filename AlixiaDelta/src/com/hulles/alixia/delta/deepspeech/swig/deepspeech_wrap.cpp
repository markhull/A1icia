/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_FILE_WITH_INIT
#include "../../deepspeech.h"


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


static ModelState* *new_modelstatep() { 
  return new ModelState*(); 
}

static ModelState* *copy_modelstatep(ModelState* value) { 
  return new ModelState*(value); 
}

static void delete_modelstatep(ModelState* *obj) { 
  if (obj) delete obj; 
}

static void modelstatep_assign(ModelState* *obj, ModelState* value) {
  *obj = value;
}

static ModelState* modelstatep_value(ModelState* *obj) {
  return *obj;
}


static StreamingState* *new_streamingstatep() { 
  return new StreamingState*(); 
}

static StreamingState* *copy_streamingstatep(StreamingState* value) { 
  return new StreamingState*(value); 
}

static void delete_streamingstatep(StreamingState* *obj) { 
  if (obj) delete obj; 
}

static void streamingstatep_assign(StreamingState* *obj, StreamingState* value) {
  *obj = value;
}

static StreamingState* streamingstatep_value(StreamingState* *obj) {
  return *obj;
}


static struct MetadataItem *new_metadataItem_array(int nelements) { 
  return new struct MetadataItem[nelements](); 
}

static void delete_metadataItem_array(struct MetadataItem *ary) { 
  delete [] ary; 
}

static struct MetadataItem metadataItem_array_getitem(struct MetadataItem *ary, int index) {
    return ary[index];
}
static void metadataItem_array_setitem(struct MetadataItem *ary, int index, struct MetadataItem value) {
    ary[index] = value;
}

SWIGINTERN MetadataItem Metadata_getItem(Metadata *self,int i){
    return metadataItem_array_getitem(self->items, i);
  }
SWIGINTERN void delete_Metadata(Metadata *self){
    DS_FreeMetadata(self);
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_new_1modelstatep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModelState **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ModelState **)new_modelstatep();
  *(ModelState ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_copy_1modelstatep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  ModelState **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  result = (ModelState **)copy_modelstatep(arg1);
  *(ModelState ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_delete_1modelstatep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelState **arg1 = (ModelState **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState ***)&jarg1; 
  delete_modelstatep(arg1);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_modelstatep_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ModelState **arg1 = (ModelState **) 0 ;
  ModelState *arg2 = (ModelState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState ***)&jarg1; 
  arg2 = *(ModelState **)&jarg2; 
  modelstatep_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_modelstatep_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ModelState **arg1 = (ModelState **) 0 ;
  ModelState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState ***)&jarg1; 
  result = (ModelState *)modelstatep_value(arg1);
  *(ModelState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_new_1streamingstatep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StreamingState **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StreamingState **)new_streamingstatep();
  *(StreamingState ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_copy_1streamingstatep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StreamingState *arg1 = (StreamingState *) 0 ;
  StreamingState **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  result = (StreamingState **)copy_streamingstatep(arg1);
  *(StreamingState ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_delete_1streamingstatep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StreamingState **arg1 = (StreamingState **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState ***)&jarg1; 
  delete_streamingstatep(arg1);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_streamingstatep_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StreamingState **arg1 = (StreamingState **) 0 ;
  StreamingState *arg2 = (StreamingState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState ***)&jarg1; 
  arg2 = *(StreamingState **)&jarg2; 
  streamingstatep_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_streamingstatep_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StreamingState **arg1 = (StreamingState **) 0 ;
  StreamingState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState ***)&jarg1; 
  result = (StreamingState *)streamingstatep_value(arg1);
  *(StreamingState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_new_1metadataItem_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  MetadataItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (MetadataItem *)new_metadataItem_array(arg1);
  *(MetadataItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_delete_1metadataItem_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  delete_metadataItem_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_metadataItem_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  int arg2 ;
  MetadataItem result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  arg2 = (int)jarg2; 
  result = metadataItem_array_getitem(arg1,arg2);
  *(MetadataItem **)&jresult = new MetadataItem((const MetadataItem &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_metadataItem_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  int arg2 ;
  MetadataItem arg3 ;
  MetadataItem *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MetadataItem **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(MetadataItem **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MetadataItem");
    return ;
  }
  arg3 = *argp3; 
  metadataItem_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1character_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->character;
    if (arg2) {
      arg1->character = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->character, (const char *)arg2);
    } else {
      arg1->character = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1character_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  result = (char *) ((arg1)->character);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1timestep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timestep = arg2;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1timestep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  result = (int) ((arg1)->timestep);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1start_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->start_time = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_MetadataItem_1start_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MetadataItem *arg1 = (MetadataItem *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataItem **)&jarg1; 
  result = (float) ((arg1)->start_time);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Metadata *arg1 = (Metadata *) 0 ;
  MetadataItem *arg2 = (MetadataItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = *(MetadataItem **)&jarg2; 
  if (arg1) (arg1)->items = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  MetadataItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = (MetadataItem *) ((arg1)->items);
  *(MetadataItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1num_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Metadata *arg1 = (Metadata *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_items = arg2;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1num_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = (int) ((arg1)->num_items);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1confidence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Metadata *arg1 = (Metadata *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->confidence = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1confidence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = (double) ((arg1)->confidence);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_Metadata_1getItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  int arg2 ;
  MetadataItem result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = (int)jarg2; 
  result = Metadata_getItem(arg1,arg2);
  *(MetadataItem **)&jresult = new MetadataItem((const MetadataItem &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_delete_1Metadata(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Metadata *arg1 = (Metadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Metadata **)&jarg1; 
  delete_Metadata(arg1);
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1NO_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_NO_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1INVALID_1ALPHABET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_INVALID_ALPHABET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1INVALID_1SHAPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_INVALID_SHAPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1INVALID_1LM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_INVALID_LM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1MODEL_1INCOMPATIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_MODEL_INCOMPATIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1INIT_1MMAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_INIT_MMAP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1INIT_1SESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_INIT_SESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1INTERPRETER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_INTERPRETER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1RUN_1SESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_RUN_SESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1CREATE_1STREAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_CREATE_STREAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1READ_1PROTOBUF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_READ_PROTOBUF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1CREATE_1SESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_CREATE_SESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_ERR_1FAIL_1CREATE_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DeepSpeech_Error_Codes result;
  
  (void)jenv;
  (void)jcls;
  result = (DeepSpeech_Error_Codes)DS_ERR_FAIL_CREATE_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_CreateModel(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  ModelState **arg3 = (ModelState **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ModelState ***)&jarg3; 
  result = (int)DS_CreateModel((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_GetModelSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  result = (int)DS_GetModelSampleRate(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FreeModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelState *arg1 = (ModelState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  DS_FreeModel(arg1);
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_EnableDecoderWithLM(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jfloat jarg4, jfloat jarg5) {
  jint jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (int)DS_EnableDecoderWithLM(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_SpeechToText(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  jshort *jarr2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  if (!SWIG_JavaArrayInShort(jenv, &jarr2, (short **)&arg2, jarg2)) return 0; 
  arg3 = (unsigned int)jarg3; 
  result = (char *)DS_SpeechToText(arg1,(short const *)arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  SWIG_JavaArrayArgoutShort(jenv, jarr2, (short *)arg2, jarg2); 
  delete [] arg2; 
  DS_FreeString(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_SpeechToTextWithMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  jshort *jarr2 ;
  Metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  if (!SWIG_JavaArrayInShort(jenv, &jarr2, (short **)&arg2, jarg2)) return 0; 
  arg3 = (unsigned int)jarg3; 
  result = (Metadata *)DS_SpeechToTextWithMetadata(arg1,(short const *)arg2,arg3);
  *(Metadata **)&jresult = result; 
  SWIG_JavaArrayArgoutShort(jenv, jarr2, (short *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_CreateStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ModelState *arg1 = (ModelState *) 0 ;
  StreamingState **arg2 = (StreamingState **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelState **)&jarg1; 
  arg2 = *(StreamingState ***)&jarg2; 
  result = (int)DS_CreateStream(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FeedAudioContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2, jlong jarg3) {
  StreamingState *arg1 = (StreamingState *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  if (!SWIG_JavaArrayInShort(jenv, &jarr2, (short **)&arg2, jarg2)) return ; 
  arg3 = (unsigned int)jarg3; 
  DS_FeedAudioContent(arg1,(short const *)arg2,arg3);
  SWIG_JavaArrayArgoutShort(jenv, jarr2, (short *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jstring JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_IntermediateDecode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  StreamingState *arg1 = (StreamingState *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  result = (char *)DS_IntermediateDecode(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  DS_FreeString(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FinishStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  StreamingState *arg1 = (StreamingState *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  result = (char *)DS_FinishStream(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  DS_FreeString(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FinishStreamWithMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StreamingState *arg1 = (StreamingState *) 0 ;
  Metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  result = (Metadata *)DS_FinishStreamWithMetadata(arg1);
  *(Metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FreeStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StreamingState *arg1 = (StreamingState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamingState **)&jarg1; 
  DS_FreeStream(arg1);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FreeMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Metadata *arg1 = (Metadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  DS_FreeMetadata(arg1);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_FreeString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  DS_FreeString(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_org_mozilla_deepspeech_libdeepspeech_implJNI_PrintVersions(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DS_PrintVersions();
}


#ifdef __cplusplus
}
#endif

